---
title: 继承
---
### 继承

##  



1. **冒充对象**

   让父类的构造函数成为子类的方法,然后调用该子类的方法,通过`this`关键字给所有的属性和方法赋值.

   **缺点:**对象冒充继承方式的缺点在于，每个对象都会保存相同的方法。这种方式会造成内存的浪费

   ​


 	父类 function Person(name, age) {
       this.name = name;
       this.age = age;
       this.sayName = function() {
           console.log(this.name);
       };
  	 }
	子类 function Student(name, age) {
	       this.obj = Person;
	       this.obj(name, age);
	       delete this.obj;
	       this.sex = "male";
   		}


   `call`和`apply`方法, 其本质也是对象冒充 还有`bind`也是一样


    父类 function Parent(name, age) {
	       this.name = name;
	       this.age = age;
	       this.sayName = function() {
           console.log(this.name);
       	}
	   }
	子类function Child(name, age) {
       // Parent.apply(this, [name, age]);
       Parent.call(this, name, age);
  	 }
   	var c = new Child("zhangsan", 21);
  	 console.log(c.name);


   2.**原型链的方式**

   使子类原型对象指向父类的实例以实现继承,即重写类的原型


    父类 function Person(name, age) {
	       this.name = name;
	       this.age = age;
	       this.sayName = function() {
           console.log(this.name);
       	};
   	}
	子类 function Student(name, age) {
	       this.constructor(name, age); // 通过父类的构造器对属性进行初始化
	       this.sex = "male";
   	}
   Student.prototype = new Person(); // 子类通过原型的方式获得父类对象中的属性

	   var stu = new Student("zhangsan", 30);
	   stu.sayName();


   3.**混合方式**

   混合call和原型链


   	function Parent(name, age) {
       this.name = name;
       this.age = age;
  	 }
  	 Parent.prototype.sayName = function() {
       console.log(this.name);
	   };
	   function Child(name, age) {
	       Parent.call(this, name, age);
	   }
	   Child.prototype = new Parent();
	   var c = new Child("zhangsan", 12);
	   c.sayName();


   ​

   作用域和执行上下文

   除了全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。	 而不是在函数调用时确定

###1.作用域和上下文的关系

   作用域只是一个**地盘**，一个抽象的概念。其中没有变量.要通过作用域对应的执行上下文环境来获取变量.在用一个作用域下，不同的调用会产生 不同的执行上下文环境，从而产生不同的变量值

   上下文的产生 用来保存函数执行时候的数据

   **2.自由变量**


	   var a = 10;
	   function fn(){
	     cosole.log(x)	 这里就是一个自由变量 函数没有被调通 仍然存在
	   }


   **3.作用域链**

   (1).首先是在当前的作用域查找a，如果有则获取结束，如果没有则继续向上查找

   (2).如果当前作用域是全局，则证明a未定义 结束 否则继续

   (3).（如果不是全局作用域，那就是函数作用域） 将创建该函数的作用域作为当前的作用域

   (4).然后继续在当前的作用域查找 

   **4.变量的提升**

   全局  局部

   
